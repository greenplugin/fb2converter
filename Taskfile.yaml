version: '3'

output: 'group'
silent: true

# we are assuming that host os is always Linux

vars:
  DEV_BUILD_DIR: 'build'
  REL_BUILD_DIR: 'release'

  REF_VER: '{{regexFind "refs/tags/v[0-9]+\\.[0-9]+\\.?[0-9]*[-a-zA-Z0-9+]*" (env "GITHUB_REF")}}'

  TATN: {sh: '{{if (env "TERM")}}tput setaf 4{{end}}'}
  TOFF: {sh: '{{if (env "TERM")}}tput sgr0{{end}}'}

env:
  CGO_ENABLED: '0'
  GOPATH: '{{default (joinPath (default "/tmp" (env "TEMP")) "gopkg_fb2c") (env "GOPATH")}}'
  GOTOOLCHAIN: 'local+path'

tasks:

  default:
    desc: Builds development version for host OS
    aliases: [debug]
    platforms: [linux]
    deps:
      - task: copy-file
        vars: {SRC: 'scripts/git/pre-commit', DST: '.git/hooks/pre-commit'}
      - task: copy-file
        vars: {SRC: 'scripts/git/pre-push', DST: '.git/hooks/pre-push'}
      - task: copy-file
        vars: {SRC: 'kindlegen/linux/kindlegen', DST: '{{.DEV_BUILD_DIR}}/kindlegen'}
      - task: generate-project-version
      - task: get-dictionaries
      - task: get-sentences
      - task: generate-enums
    cmds:
      - task: go-build
        vars: {FLAGS: 'debug', PACKAGE: './cmd/fb2c', TARGET: '{{.DEV_BUILD_DIR}}/fb2c'}
      - task: lint

  test:
    desc: |
      Runs available tests.
      When invoked as usual runs tests for all packages where it can find "*_test.go" files, for example: "task test".
      You can specify what tests to run by using PACKAGES environment variable, for example: "PACKAGES='./hyphenator,./processor' task test".
      You can pass any additional parameters supported by "go test", for example: "PACKAGES='./hyphenator' task test -- -run=TestHyphenatorSpecial".
    platforms: [linux]
    deps: [generate-project-version, get-dictionaries, get-sentences, generate-enums]
    vars:
      TEST_DIR: "{{.ROOT_DIR}}/{{.DEV_BUILD_DIR}}/tests_results"
      DIRS_WITH_TESTS:
        sh: find -name '*_test.go' -printf "%h\n" | sort -u
      PACKAGES: '{{default .DIRS_WITH_TESTS (replace "," "\n" (env "PACKAGES"))}}'
    env:
      # race instrumentation requires cgo
      CGO_ENABLED: "1"
    cmds:
      - mkdir -p {{.TEST_DIR}}
      - for: {var: PACKAGES}
        cmd: |
          echo
          echo "{{.TATN}}{{clean .ITEM}} tests...{{.TOFF}}"
          echo
          go test -mod=mod -v -coverprofile='{{.TEST_DIR}}/test_{{replace "/" "_" (clean .ITEM)}}_coverage.out' {{.CLI_ARGS}} '{{.ITEM}}'

  bench:
    desc: |
      Runs available benchmarks.
      When invoked as usual runs benchmarks for all packages where it can find "*_test.go" files, for example: "task bench".
      You can specify what packages to benchmark by using PACKAGES environment variable, for example: "PACKAGES='./cache,./service' task bench".
      You can pass any additional parameters supported by "go test", for example: "PACKAGES='./marshallers/segdiffs' task bench -- -bench=BenchmarkBinary -benchmem".
    platforms: [linux]
    deps: [generate-project-version, get-dictionaries, get-sentences, generate-enums]
    vars:
      TEST_DIR: "{{.ROOT_DIR}}/{{.DEV_BUILD_DIR}}/tests_results"
      DIRS_WITH_TESTS:
        sh: find -name '*_test.go' -printf "%h\n" | sort -u
      PACKAGES: '{{default .DIRS_WITH_TESTS (replace "," "\n" (env "PACKAGES"))}}'
    env:
      # some instrumentation requires cgo
      CGO_ENABLED: "1"
    cmds:
      - mkdir -p {{.TEST_DIR}}
      - for: {var: PACKAGES}
        cmd: |
          echo
          echo "{{.TATN}}{{clean .ITEM}} benchmarks...{{.TOFF}}"
          echo
          go test -mod=mod -run=XXX_no_tests_XXX {{default "-bench=." .CLI_ARGS}} '{{.ITEM}}'

  escape:
    desc: |
      Runs escape analisys on specified package.
      You could specify anything in the project, for example "task escape -- ./marshallers/segdiffs".
      If no package is specified assumes "./cmd/goliath".
    platforms: [linux]
    deps: [generate-project-version, get-dictionaries, get-sentences, generate-enums]
    cmds:
      - echo "{{.TATN}}Building binary with escape analisys enabled{{.TOFF}}"
      - go build -mod=mod -gcflags 'all=-m' -o /dev/null {{default "./cmd/fb2c" .CLI_ARGS}}
    method: none

  release:
    desc: Cross-builds release for all supported platforms
    platforms: [linux]
    deps: [generate-project-version, get-dictionaries, get-sentences]
    cmds:
      - mkdir -p '{{.REL_BUILD_DIR}}'
      - for: [linux-amd64, linux-arm64, linux-386, darwin-amd64, darwin-arm64, windows-amd64-.exe, windows-arm64-.exe, windows-386-.exe]
        task: release-for-platform-{{with $arch := split "-" .ITEM}}{{$arch._0}}{{end}}
        vars:
          GOOS: '{{with $arch := split "-" .ITEM}}{{$arch._0}}{{end}}'
          GOARCH: '{{with $arch := split "-" .ITEM}}{{$arch._1}}{{end}}'
          SUFFIX: '{{with $arch := split "-" .ITEM}}{{$arch._2}}{{end}}'

  release-for-platform-windows:
    internal: true
    desc: Builds release for specified platform
    requires:
      vars: [GOOS, GOARCH, SUFFIX]
    label: release-for-platform-windows-{{.GOOS}}-{{.GOARCH}}
    vars:
      BUILD_DIR: '{{.REL_BUILD_DIR}}_{{.GOOS}}_{{.GOARCH}}'
      REL_NAME: '{{.REL_BUILD_DIR}}/fb2c-{{.GOOS}}-{{.GOARCH}}'
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - defer: rm -rf {{.BUILD_DIR}}
      - task: copy-file
        vars: {SRC: 'kindlegen/{{.GOOS}}/kindlegen{{.SUFFIX}}', DST: '{{.BUILD_DIR}}/fb2converter/kindlegen{{.SUFFIX}}'}
      - task: go-build
        vars: {GOOS: '{{.GOOS}}', GOARCH: '{{.GOARCH}}', FLAGS: 'release', PACKAGE: './cmd/fb2c', TARGET: '{{.BUILD_DIR}}/fb2converter/fb2c{{.SUFFIX}}'}
      - task: go-build
        vars: {GOOS: '{{.GOOS}}', GOARCH: '{{.GOARCH}}', FLAGS: 'release', PACKAGE: './cmd/fb2epub', TARGET: '{{.BUILD_DIR}}/fb2epub/fb2epub{{.SUFFIX}}'}
      - task: go-build
        vars: {GOOS: '{{.GOOS}}', GOARCH: '{{.GOARCH}}', FLAGS: 'release', PACKAGE: './cmd/fb2mobi', TARGET: '{{.BUILD_DIR}}/fb2mobi/fb2mobi{{.SUFFIX}}'}
      - echo "{{.TATN}}Archiving release \"{{.REL_NAME}}.zip\"{{.TOFF}}"
      - 7z a -r -bd -bso0 -tzip {{.REL_NAME}} ./{{.BUILD_DIR}}/*
    status:
      - test -f '{{.REL_NAME}}.zip'

  release-for-platform-linux:
    internal: true
    desc: Builds release for specified platform
    requires:
      vars: [GOOS, GOARCH, SUFFIX]
    label: release-for-platform-linux-{{.GOOS}}-{{.GOARCH}}
    vars:
      BUILD_DIR: '{{.REL_BUILD_DIR}}_{{.GOOS}}_{{.GOARCH}}'
      REL_NAME: '{{.REL_BUILD_DIR}}/fb2c-{{.GOOS}}-{{.GOARCH}}'
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - defer: rm -rf {{.BUILD_DIR}}
      - task: copy-file
        vars: {SRC: 'kindlegen/{{.GOOS}}/kindlegen', DST: '{{.BUILD_DIR}}/kindlegen'}
      - task: go-build
        vars: {GOOS: '{{.GOOS}}', GOARCH: '{{.GOARCH}}', FLAGS: 'release', PACKAGE: './cmd/fb2c', TARGET: '{{.BUILD_DIR}}/fb2c'}
      - echo "{{.TATN}}Archiving release \"{{.REL_NAME}}.zip\"{{.TOFF}}"
      - 7z a -r -bd -bso0 -tzip {{.REL_NAME}} ./{{.BUILD_DIR}}/*
    status:
      - test -f '{{.REL_NAME}}.zip'

  release-for-platform-darwin:
    internal: true
    desc: Builds release for specified platform
    requires:
      vars: [GOOS, GOARCH, SUFFIX]
    label: release-for-platform-darwin-{{.GOOS}}-{{.GOARCH}}
    vars:
      BUILD_DIR: '{{.REL_BUILD_DIR}}_{{.GOOS}}_{{.GOARCH}}'
      REL_NAME: '{{.REL_BUILD_DIR}}/fb2c-{{.GOOS}}-{{.GOARCH}}'
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - defer: rm -rf {{.BUILD_DIR}}
      - task: copy-file
        vars: {SRC: 'kindlegen/{{.GOOS}}/kindlegen{{.SUFFIX}}', DST: '{{.BUILD_DIR}}/kindlegen{{.SUFFIX}}'}
      - task: go-build
        vars: {GOOS: '{{.GOOS}}', GOARCH: '{{.GOARCH}}', FLAGS: 'release', PACKAGE: './cmd/fb2c', TARGET: '{{.BUILD_DIR}}/fb2c{{.SUFFIX}}'}
      - echo "{{.TATN}}Archiving release \"{{.REL_NAME}}.zip\"{{.TOFF}}"
      - 7z a -r -bd -bso0 -tzip {{.REL_NAME}} ./{{.BUILD_DIR}}/*
    status:
      - test -f '{{.REL_NAME}}.zip'

  generate-enums:
    internal: true
    desc: Generates fmt.Stringer interfaces for specified enum types
    vars:
      STRINGER: '{{.DEV_BUILD_DIR}}/stringer'
    cmds:
      - task: go-build-tool
        vars: {PACKAGE: 'golang.org/x/tools/cmd/stringer', TARGET: '{{.STRINGER}}'}
      - echo "{{.TATN}}Generating enums{{.TOFF}}"
      - |
        ./{{.STRINGER}} -linecomment \
          -type OutputFmt,NotesFmt,TOCPlacement,TOCType,APNXGeneration,StampPlacement,CoverProcessing \
          -output processor/enums_string.go \
          processor/enums.go
    sources:
      - processor/enums.go
    generates:
      - processor/enums_string.go

  lint:
    desc: Lints the whole project
    platforms: [linux]
    vars:
      LINTER: '{{.DEV_BUILD_DIR}}/staticcheck'
    cmds:
      - task: build-linter
        vars: {LINTER: '{{.LINTER}}'}
      - echo "{{.TATN}}Linting project{{.TOFF}}"
      - ./{{.LINTER}} -f stylish -tests=false ./...
    sources:
      - ./**/*.go
      - ./go.sum
      - ./go.mod

  build-linter:
    internal: true
    desc: Builds linter for the project
    requires:
      vars: [LINTER]
    cmds:
      - task: go-build-tool
        vars: {PACKAGE: 'honnef.co/go/tools/cmd/staticcheck', TARGET: '{{.LINTER}}'}
    sources:
      - tools/tools.go
      - go.mod
      - go.sum
    generates:
      - '{{.LINTER}}'

  go-build:
    internal: true
    run: when_changed
    desc: Builds binary using go toolchain
    requires:
      vars: [PACKAGE, TARGET, FLAGS]
    label: go-build-{{.PACKAGE}}-{{.TARGET}}-{{.FLAGS}}
    env: {GOOS: '{{default "linux" .GOOS}}', GOARCH: '{{default "amd64" .GOARCH}}'}
    vars:
      GOARGS: |
        {{- if eq .FLAGS "debug" -}}
          -mod=mod -gcflags 'all=-N -l'
        {{- else if eq .FLAGS "release" -}}
          -mod=vendor -trimpath
        {{- else -}}
        {{fail "go build flags could be \"debug\" or \"release\" only!"}}
        {{- end -}}
    cmds:
      - echo "{{.TATN}}Building \"{{base .TARGET}}\" binary for \"$GOOS:$GOARCH\" from \"{{.PACKAGE}}\"{{.TOFF}}"
      - go build {{.GOARGS}} -o '{{.TARGET}}' '{{.PACKAGE}}'
    sources:
      - ./**/*.go
    generates:
      - '{{.TARGET}}'

  go-build-tool:
    internal: true
    run: when_changed
    desc: Builds binary using go toolchain.
    label: go-build-tool-{{.PACKAGE}}-{{.TARGET}}
    requires:
      vars: [PACKAGE, TARGET]
    cmds:
      - echo "{{.TATN}}Building \"{{base .TARGET}}\" binary from \"{{.PACKAGE}}\"{{.TOFF}}"
      - go build -mod=mod -trimpath -o '{{.TARGET}}' '{{.PACKAGE}}'
    sources:
      - ./**/*.go
    generates:
      - '{{.TARGET}}'

  generate-project-version:
    internal: true
    desc: Generates "misc/version.go" file with version info to be used on runtime.
    run: when_changed
    vars:
      VER: '{{if .REF_VER}}{{regexFind "[0-9]+\\.[0-9]+\\.?[0-9]*[-a-zA-Z0-9+]*" .REF_VER}}{{else}}0.0.0-dev{{end}}'
      DIR: '{{.ROOT_DIR}}/misc'
      FILE: '{{.ROOT_DIR}}/misc/version.go'
      GIT_HASH:
        sh: git rev-list -1 HEAD || true
      GIT_STATUS:
        sh: git diff --shortstat
    cmds:
      - echo "{{.TATN}}Version {{.VER}} {{.GIT_HASH}}{{if .GIT_STATUS}}*{{end}}{{.TOFF}}"
      - mkdir -p {{.DIR}}
      - |
        cat << EOF > {{.FILE}}
        package misc

        func GetVersion() string {
            return "{{.VER}}"
        }

        func GetGitHash() string {
            return "{{.GIT_HASH}}{{if .GIT_STATUS}}*{{end}}"
        }
        EOF
      - gofmt -w {{.FILE}}
    sources:
      - .git/index
    generates:
      - '{{.FILE}}'

  get-dictionaries:
    internal: true
    run: once
    desc: Get dictionary rules for all supported languages
    vars:
      DIR: 'static/dictionaries'
    dir: '{{.DIR}}'
    cmds:
      - rm -f *.txt
      - echo "{{.TATN}}Downloading dictionary patterns from \"ctan.math.utah.edu\"{{.TOFF}}"
      - wget -q -r -l1 --no-parent -nd -A.pat.txt http://ctan.math.utah.edu/ctan/tex-archive/language/hyph-utf8/tex/patterns/txt
      - wget -q -r -l1 --no-parent -nd -A.hyp.txt http://ctan.math.utah.edu/ctan/tex-archive/language/hyph-utf8/tex/patterns/txt
      - gzip -q -f hyph-*.txt
    status:
      - find -type f -name 'hyph-*.txt.gz' | grep -q .

  get-sentences:
    internal: true
    run: once
    desc: Get NLTK training data
    vars:
      DIR: 'static/sentences'
    dir: '{{.DIR}}'
    cmds:
      - rm -f *.json
      - echo "{{.TATN}}Downloading NLTK training data from \"neurosnap/sentences\"{{.TOFF}}"
      - curl -s -L https://api.github.com/repos/neurosnap/sentences/tarball | tar xz --wildcards '*/data/*.json' --strip-components=2
      - gzip -q -f *.json
    status:
      - |
        find -type f -name '*.json.gz' \
          -not -name 'russian.json.gz' \
          -not -name 'icelandic.json.gz' \
          -not -name 'korean.json.gz' \
          -not -name 'hungarian.json.gz' | grep -q .

  go-tidy:
    desc: Tidy Go modules for the project.
    platforms: [linux]
    aliases: [tidy]
    vars:
      GO_VER: '{{default "" (regexFind "[0-9]+\\.[0-9]+\\.?[0-9]*[-a-zA-Z0-9+]*" (env "CUR_PROJECT_TYPE"))}}'
    cmds:
      - GOOS=linux go mod tidy{{if .GO_VER}} -go={{.GO_VER}}{{end}} {{.CLI_ARGS}}
      - GOOS=darwin go mod tidy{{if .GO_VER}} -go={{.GO_VER}}{{end}} {{.CLI_ARGS}}
      - GOOS=windows go mod tidy{{if .GO_VER}} -go={{.GO_VER}}{{end}} {{.CLI_ARGS}}

  go-vendor:
    desc: Creates vendor directory for release build
    platforms: [linux]
    aliases: [vendor]
    cmds:
      - GOOS=linux go mod vendor
      - GOOS=darwin go mod vendor
      - GOOS=windows go mod vendor

  clean:
    desc: Cleans all build release aritfacts
    platforms: [linux]
    cmds:
      - |
        find 'static/sentences' -type f \
          -name '*.json.gz' \
          -not -name 'russian.json.gz' \
          -not -name 'icelandic.json.gz' \
          -not -name 'korean.json.gz' \
          -not -name 'hungarian.json.gz' \
          -delete -printf "removed '%p'\n"
      - |
        find 'static/dictionaries' -type f \
          -name 'hyph-*.txt.gz' \
          -delete -printf "removed '%p'\n"
      - rm -rfv {{.REL_BUILD_DIR}}
      - rm -rfv {{.DEV_BUILD_DIR}}
      - rm -fv .task/checksum/*
      - rm -fv .task/timestamp/*
      - rm -fv misc/version.go

  copy-file:
    internal: true
    desc: Copies source file to destination
    requires:
      vars: [SRC, DST]
    label: copy-file-{{.SRC}}-{{.DST}}
    cmds:
      - echo "{{.TATN}}Copying \"{{.SRC}}\" to \"{{.DST}}\"{{.TOFF}}"
      - mkdir -p {{dir .DST}}
      - cp '{{.SRC}}' '{{.DST}}'
    sources:
      - '{{.SRC}}'
    generates:
      - '{{.DST}}'
    status:
      - test -f '{{.DST}}'
    method: timestamp
